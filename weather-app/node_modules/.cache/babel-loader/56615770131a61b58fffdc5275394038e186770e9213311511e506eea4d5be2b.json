{"ast":null,"code":"var _jsxFileName = \"/Users/hyeyeonkim/react-coalnu/weather-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport { Container } from \"react-bootstrap\";\nimport WeatherButton from \"./components/WeatherButton\";\nimport WeatherBox from \"./components/WeatherBox\";\nimport { ClipLoader } from \"react-spinners\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst cities = [\"sydney\", \"paris\", \"new york\", \"seoul\"];\nconst API_KEY = process.env.REACT_APP_API_KEY;\nconst App = () => {\n  _s();\n  const [loading, setLoading] = useState(false);\n  const [city, setCity] = useState(null);\n  const [weather, setWeather] = useState(null);\n  const [apiError, setAPIError] = useState(\"\");\n  const getWeatherByCurrentLocation = async (lat, lon) => {\n    try {\n      let url = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${API_KEY}`;\n      const res = await fetch(url);\n      const data = await res.json();\n      setWeather(data);\n      setLoading(false);\n    } catch (err) {\n      setAPIError(err.message);\n      setLoading(false);\n    }\n  };\n  const getCurrentLocation = () => {\n    navigator.geolocation.getCurrentPosition(position => {\n      const {\n        latitude,\n        longitude\n      } = position.coords;\n      getWeatherByCurrentLocation(latitude, longitude);\n    });\n  };\n  const getWeatherByCity = async () => {\n    try {\n      let url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}`;\n      const res = await fetch(url);\n      const data = await res.json();\n      setWeather(data);\n      setLoading(false);\n    } catch (err) {\n      console.log(err);\n      setAPIError(err.message);\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    if (city == null) {\n      setLoading(true);\n      getCurrentLocation();\n    } else {\n      setLoading(true);\n      getWeatherByCity();\n    }\n  }, [city]);\n  const handleCityChange = city => {\n    if (city === \"current\") {\n      setCity(null);\n    } else {\n      setCity(city);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      className: \"vh-100\",\n      children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-100 vh-100 d-flex justify-content-center align-items-center\",\n        children: /*#__PURE__*/_jsxDEV(ClipLoader, {\n          color: \"#f86c6b\",\n          size: 150,\n          loading: loading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this) : !apiError ? /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"main-container\",\n        children: [/*#__PURE__*/_jsxDEV(WeatherBox, {\n          weather: weather\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(WeatherButton, {\n          cities: cities,\n          handleCityChange: handleCityChange,\n          selectedCity: city\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this) : apiError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(App, \"dFcik+qQV3QDtK3E8P2TxOX54sA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Container","WeatherButton","WeatherBox","ClipLoader","jsxDEV","_jsxDEV","Fragment","_Fragment","cities","API_KEY","process","env","REACT_APP_API_KEY","App","_s","loading","setLoading","city","setCity","weather","setWeather","apiError","setAPIError","getWeatherByCurrentLocation","lat","lon","url","res","fetch","data","json","err","message","getCurrentLocation","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","getWeatherByCity","console","log","handleCityChange","children","className","color","size","fileName","_jsxFileName","lineNumber","columnNumber","class","selectedCity","_c","$RefreshReg$"],"sources":["/Users/hyeyeonkim/react-coalnu/weather-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport { Container } from \"react-bootstrap\";\nimport WeatherButton from \"./components/WeatherButton\";\nimport WeatherBox from \"./components/WeatherBox\";\nimport { ClipLoader } from \"react-spinners\";\n\nconst cities = [\"sydney\", \"paris\", \"new york\", \"seoul\"];\nconst API_KEY = process.env.REACT_APP_API_KEY;\n\nconst App = () => {\n  const [loading, setLoading] = useState(false);\n  const [city, setCity] = useState(null);\n  const [weather, setWeather] = useState(null);\n  const [apiError, setAPIError] = useState(\"\");\n\n  const getWeatherByCurrentLocation = async (lat, lon) => {\n    try {\n      let url = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${API_KEY}`;\n      const res = await fetch(url);\n      const data = await res.json();\n\n      setWeather(data);\n      setLoading(false);\n    } catch (err) {\n      setAPIError(err.message);\n      setLoading(false);\n    }\n  };\n\n  const getCurrentLocation = () => {\n    navigator.geolocation.getCurrentPosition((position) => {\n      const { latitude, longitude } = position.coords;\n      getWeatherByCurrentLocation(latitude, longitude);\n    });\n  };\n\n  const getWeatherByCity = async () => {\n    try {\n      let url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}`;\n      const res = await fetch(url);\n      const data = await res.json();\n\n      setWeather(data);\n      setLoading(false);\n    } catch (err) {\n      console.log(err);\n      setAPIError(err.message);\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (city == null) {\n      setLoading(true);\n      getCurrentLocation();\n    } else {\n      setLoading(true);\n      getWeatherByCity();\n    }\n  }, [city]);\n\n  const handleCityChange = (city) => {\n    if (city === \"current\") {\n      setCity(null);\n    } else {\n      setCity(city);\n    }\n  };\n\n  return (\n    <>\n      <Container className=\"vh-100\">\n        {loading ? (\n          <div className=\"w-100 vh-100 d-flex justify-content-center align-items-center\">\n            <ClipLoader color=\"#f86c6b\" size={150} loading={loading} />\n          </div>\n        ) : !apiError ? (\n          <div class=\"main-container\">\n            <WeatherBox weather={weather} />\n            <WeatherButton\n              cities={cities}\n              handleCityChange={handleCityChange}\n              selectedCity={city}\n            />\n          </div>\n        ) : (\n          apiError\n        )}\n      </Container>\n    </>\n  );\n};\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}